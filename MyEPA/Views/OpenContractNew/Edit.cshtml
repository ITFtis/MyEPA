@model MyEPA.ViewModels.OpenContractViewModel
@using MyEPA.Models;

@{
    ViewBag.Title = "開口合約-修改";
    Layout = "~/Views/_Layout.cshtml";

    List<ResourceTypeModel> types = ViewBag.Types;
    UserBriefModel user = ViewBag.User;

    List<FileDataModel> coverFiles = ViewBag.CoverFiles;
    List<FileDataModel> sealFiles = ViewBag.SealFiles;
    List<FileDataModel> detailFiles = ViewBag.DetailFiles;
}
<link rel="stylesheet" href="~/Content/flatpickr.css">
<link rel="stylesheet" href="~/Content/confirmDate.css">
<h2>修改開口合約</h2>

@if (Model != null)
{
    using (Html.BeginForm("Edit", "OpenContractNew", FormMethod.Post, new { @enctype = "multipart/form-data" }))
    {
        @Html.AntiForgeryToken()

        <div class="form-horizontal">
            <hr />

            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            @Html.HiddenFor(model => model.Id)

            <div class="form-group">
                <label class="control-label col-md-2">
                    <span class="text-danger">*</span>
                    合約種類
                </label>
                <div class="col-md-10">
                    <select id="ResourceTypeId" name="ResourceTypeId">
                        @foreach (var item in types)
                        {
                            string selected = @item.Id == Model.ResourceTypeId ? "selected" : "";
                            <option value="@item.Id" @selected>@item.Name</option>
                        }
                    </select>
                </div>
            </div>

            <div class="form-group">
                <label class="control-label col-md-2">
                    <span class="text-danger">*</span>
                    合約名稱
                </label>
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control", @required = "required" } })
                    @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                <label class="control-label col-md-2">
                    <span class="text-danger">*</span>
                    簽約日期
                </label>
                <div class="col-md-10">
                    @Html.EditorFor(model => model.KeyInDate, new { htmlAttributes = new { @class = "form-control flatpickr flatpickr-input", @required = "required" } })
                    @Html.ValidationMessageFor(model => model.KeyInDate, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                <label class="control-label col-md-2">
                    <span class="text-danger">*</span>
                    合約起始
                </label>
                <div class="col-md-10">
                    @Html.EditorFor(model => model.OContractDateBegin, new { htmlAttributes = new { @class = "form-control flatpickr flatpickr-input", @required = "required" } })
                    @Html.ValidationMessageFor(model => model.OContractDateBegin, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                <label class="control-label col-md-2">
                    <span class="text-danger">*</span>
                    合約截止
                </label>
                <div class="col-md-10">
                    @Html.EditorFor(model => model.OContractDateEnd, new { htmlAttributes = new { @class = "form-control flatpickr flatpickr-input", @required = "required" } })
                    @Html.ValidationMessageFor(model => model.OContractDateEnd, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                <label class="control-label col-md-2">
                    <span class="text-danger">*</span>
                    合約廠商
                </label>
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Fac, new { htmlAttributes = new { @class = "form-control", @required = "required" } })
                    @Html.ValidationMessageFor(model => model.Fac, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                <label class="control-label col-md-2">
                    <span class="text-danger">*</span>
                    負責人
                </label>
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Owner, new { htmlAttributes = new { @class = "form-control", @required = "required" } })
                    @Html.ValidationMessageFor(model => model.Owner, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                <label class="control-label col-md-2">
                    <span class="text-danger">*</span>
                    聯絡電話
                </label>
                <div class="col-md-10">
                    @Html.EditorFor(model => model.TEL, new { htmlAttributes = new { @class = "form-control", @pattern = RegexUtility.TEL, @required = "required" } })
                    @Html.ValidationMessageFor(model => model.TEL, "", new { @class = "text-danger" })
                    EX.012-34567890#12345
                </div>
            </div>

            <div class="form-group">
                <label class="control-label col-md-2">
                    <span class="text-danger">*</span>
                    行動電話
                </label>
                <div class="col-md-10">
                    @Html.EditorFor(model => model.MobileTEL, new { htmlAttributes = new { @class = "form-control", @pattern = RegexUtility.Mobile, @required = "required" } })
                    @Html.ValidationMessageFor(model => model.MobileTEL, "", new { @class = "text-danger" })
                    EX.0912-345678
                </div>

            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.IsSupportCity, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.DropDownList("IsSupportCity", new List<SelectListItem>
                    {
                        new SelectListItem{Text = "否", Value = "false"},
                        new SelectListItem{Text = "是", Value = "true"},
                    })
                </div>

            </div>

            <div class="form-group">
                <label class="control-label col-md-2">
                    <span class="text-danger">*</span>
                    契約書封面<br />
                    <span class="text-success">(上限20Mb)</span>
                </label>
                <div class="col-md-10">
                    @foreach (var item in coverFiles)
                    {
                        <a href="@Url.Action("Download", "FileData", new { id = item.Id })">@item.UserFileName</a>
                    }
                    <input type="file" name="CoverFile" id="file" @(coverFiles.Count == 0 ? "required" : "") accept=".png, .pdf, .jpg, .jpeg, .docx" />
                    <span class="text-primary mt-2">限定(.png, .pdf, .jpg, .jpeg, .docx)</span>
                </div>
            </div>

            <div class="form-group">
                <label class="control-label col-md-2">
                    <span class="text-danger">*</span>
                    雙方用印<br />
                    <span class="text-success">(上限20Mb)</span>
                </label>
                <div class="col-md-10">
                    @foreach (var item in sealFiles)
                    {
                        <a href="@Url.Action("Download", "FileData", new { id = item.Id })">@item.UserFileName</a>
                    }
                    <input type="file" name="SealFile" id="file" @(sealFiles.Count == 0 ? "required" : "") accept=".png, .pdf, .jpg, .jpeg, .docx" />
                    <span class="text-primary mt-2">限定(.png, .pdf, .jpg, .jpeg, .docx)</span>
                </div>
            </div>

            <div class="form-group">
                <label class="control-label col-md-2">
                    <span class="text-danger">*</span>
                    合約細目<br />
                    <span class="text-success">(上限20Mb)</span>
                </label>
                <div class="col-md-10">
                    @foreach (var item in detailFiles)
                    {
                        <a href="@Url.Action("Download", "FileData", new { id = item.Id })">@item.UserFileName</a>
                    }
                    <input type="file" name="DetailFile" id="file" @(detailFiles.Count == 0 ? "required" : "") accept=".png, .pdf, .jpg, .jpeg, .docx" />
                    <span class="text-primary mt-2">限定(.png, .pdf, .jpg, .jpeg, .docx)</span>
                </div>
            </div>

            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    @if (ViewBag.CanEdit)
                    {
                        <input type="submit" value="修改" class="btn btn-danger" />
                    }

                    @Html.ActionLink("回上一頁", "Index", null, new { @class = "btn btn-success" })
                    @if (ViewBag.CanEdit)
                    {
                        <a class="btn btn-success" onclick="Copy()">複製合約</a>
                    }
                </div>
            </div>
        </div>
    }
}
<script src="~/Scripts/confirmDate.js"></script>
<script src="~/Scripts/flatpickr.js"></script>

@section scripts{
    <script>
        $(document).ready(function () {

        });

        $('input[name="CoverFile"]').on("change", function () {
            //限定檔案大小
            var mb = 20;
            var maxSize = mb * 1024 * 1024;  //mb(上限)
            if (this.files[0].size > maxSize) {
                alert("(契約書封面)檔案上限:" + mb.toString() + "MB");
                $(this).val('');
                return;
            };
        })

        $('input[name="SealFile"]').on("change", function () {
            //限定檔案大小
            var mb = 20;
            var maxSize = mb * 1024 * 1024;  //mb(上限)
            if (this.files[0].size > maxSize) {
                alert("(雙方用印)檔案上限:" + mb.toString() + "MB");
                $(this).val('');
                return;
            };
        })

        $('input[name="DetailFile"]').on("change", function () {
            //限定檔案大小
            var mb = 20;
            var maxSize = mb * 1024 * 1024;  //mb(上限)
            if (this.files[0].size > maxSize) {
                alert("(合約細目)檔案上限:" + mb.toString() + "MB");
                $(this).val('');
                return;
            };
        })

        function Copy() {
            $.ajax({
                url: '@Url.Action("Copy", "OpenContractNew")',
                datatype: "json",
                type: "Post",
                data: { copyId: @Model.Id },
                async: false,
                success: function (data) {
                    if (data.result) {
                        alert("複製合約成功");
                        location.href = '@Url.Action("Index")';
                    } else {
                        alert("複製合約失敗：\n" + data.errorMessage);
                    }
                },
                error: function (xhr, status, error) {
                    var err = eval("(" + xhr.responseText + ")");
                    alert(err.Message);
                }
            });
        }

    </script>
}